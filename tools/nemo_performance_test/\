#include <iostream>
#include <vector>
#include <string>
#include <ctime>
#include <inttypes.h>
#include <limits>
#include <thread>

#include "nemo.h"
#include "xdebug.h"
#include "time_keeper.h"

#define N 1000
#define KV 1000
using namespace nemo;

int main()
{
    nemo::Options options;
    options.target_file_size_base = 20 * 1024 * 1024;
    Nemo *n = new Nemo("./tmp/", options);

    std::vector<std::thread> pool_get(N);
    std::vector<std::thread> pool_set(N);
    time_keeper tk;
/**    
    for(int i=0;i<N;i++){
        pool_set.push_back(std::thread(fun_set,key,value,field));
        pool_get.push_back(std::thread(fun_get,key));
    }

    for(int i=0;i<N;i++){
        pool_set[i].join();
        pool_get[i].join();
    }
*/ 
    std::cout<<tk.delay()<<std::endl;
    std::cout<<"over!"<<std::endl;
    
    delete n;
}


